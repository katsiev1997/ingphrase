generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Модель пользователя с добавленным полем role
model User {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  name           String?
  role           Role     @default(USER) // Добавлено поле role
  favoritePhrases Phrase[] @relation("FavoritePhrases")

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// Модель категории
model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique

  phrases   Phrase[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Модель фраз с добавленным полем audioUrl
model Phrase {
  id            Int      @id @default(autoincrement())
  title         String
  translate     String
  transcription String
  audioUrl      String?  // URL для озвучки фразы (необязательное поле)

  favoritedBy   User[]    @relation("FavoritePhrases")
  
  categoryId    Int
  category      Category  @relation(fields: [categoryId], references: [id])

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Модель диалога с добавленным полем audioUrl
model Dialogue {
  id            Int        @id @default(autoincrement())
  title         String     // Название диалога
  audioUrl      String?    // URL для озвучки диалога (необязательное поле)
  messages      Message[]  // Связь с сообщениями

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// Модель сообщения в диалоге
model Message {
  id            Int        @id @default(autoincrement())
  originalText  String     // Оригинальный текст сообщения
  translatedText String    // Перевод сообщения

  dialogueId    Int        // Внешний ключ
  dialogue      Dialogue   @relation(fields: [dialogueId], references: [id]) // Сообщение принадлежит одному диалогу

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// Определение ролей
enum Role {
  ADMIN
  MODERATOR
  USER
}
